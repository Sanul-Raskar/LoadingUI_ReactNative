import React, {useState} from 'react';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  StatusBar,
  Animated,
  Button,
  Easing,
  Dimensions,
} from 'react-native';
import {Svg, Path} from 'react-native-svg';
import LinearGradient from 'react-native-linear-gradient';

const App = () => {
  const AnimatedPath = Animated.createAnimatedComponent(Path);
  const anim = useState(new Animated.Value(0))[0];
  const anim2 = useState(new Animated.Value(0))[0];
  const water = useState(new Animated.Value(0))[0];
  const opacity = useState(new Animated.Value(0.8))[0];

  /* for path1 */
  const d1 =
    'M0,32L9.2,80C18.5,128,37,224,55,218.7C73.8,213,92,107,111,90.7C129.2,75,148,149,166,186.7C184.6,224,203,224,222,192C240,160,258,96,277,96C295.4,96,314,160,332,176C350.8,192,369,160,388,160C406.2,160,425,192,443,186.7C461.5,181,480,139,498,149.3C516.9,160,535,224,554,240C572.3,256,591,224,609,192C627.7,160,646,128,665,128C683.1,128,702,160,720,170.7C738.5,181,757,171,775,170.7C793.8,171,812,181,831,192C849.2,203,868,213,886,186.7C904.6,160,923,96,942,96C960,96,978,160,997,154.7C1015.4,149,1034,75,1052,74.7C1070.8,75,1089,149,1108,170.7C1126.2,192,1145,160,1163,165.3C1181.5,171,1200,213,1218,240C1236.9,267,1255,277,1274,250.7C1292.3,224,1311,160,1329,122.7C1347.7,85,1366,75,1385,64C1403.1,53,1422,43,1431,37.3L1440,32L1440,320L1430.8,320C1421.5,320,1403,320,1385,320C1366.2,320,1348,320,1329,320C1310.8,320,1292,320,1274,320C1255.4,320,1237,320,1218,320C1200,320,1182,320,1163,320C1144.6,320,1126,320,1108,320C1089.2,320,1071,320,1052,320C1033.8,320,1015,320,997,320C978.5,320,960,320,942,320C923.1,320,905,320,886,320C867.7,320,849,320,831,320C812.3,320,794,320,775,320C756.9,320,738,320,720,320C701.5,320,683,320,665,320C646.2,320,628,320,609,320C590.8,320,572,320,554,320C535.4,320,517,320,498,320C480,320,462,320,443,320C424.6,320,406,320,388,320C369.2,320,351,320,332,320C313.8,320,295,320,277,320C258.5,320,240,320,222,320C203.1,320,185,320,166,320C147.7,320,129,320,111,320C92.3,320,74,320,55,320C36.9,320,18,320,9,320L0,320Z';
  const d2 =
    'M0,96L9.2,122.7C18.5,149,37,203,55,208C73.8,213,92,171,111,170.7C129.2,171,148,213,166,208C184.6,203,203,149,222,122.7C240,96,258,96,277,96C295.4,96,314,96,332,101.3C350.8,107,369,117,388,117.3C406.2,117,425,107,443,117.3C461.5,128,480,160,498,192C516.9,224,535,256,554,240C572.3,224,591,160,609,138.7C627.7,117,646,139,665,149.3C683.1,160,702,160,720,160C738.5,160,757,160,775,149.3C793.8,139,812,117,831,106.7C849.2,96,868,96,886,122.7C904.6,149,923,203,942,208C960,213,978,171,997,138.7C1015.4,107,1034,85,1052,96C1070.8,107,1089,149,1108,170.7C1126.2,192,1145,192,1163,208C1181.5,224,1200,256,1218,266.7C1236.9,277,1255,267,1274,229.3C1292.3,192,1311,128,1329,138.7C1347.7,149,1366,235,1385,272C1403.1,309,1422,299,1431,293.3L1440,288L1440,320L1430.8,320C1421.5,320,1403,320,1385,320C1366.2,320,1348,320,1329,320C1310.8,320,1292,320,1274,320C1255.4,320,1237,320,1218,320C1200,320,1182,320,1163,320C1144.6,320,1126,320,1108,320C1089.2,320,1071,320,1052,320C1033.8,320,1015,320,997,320C978.5,320,960,320,942,320C923.1,320,905,320,886,320C867.7,320,849,320,831,320C812.3,320,794,320,775,320C756.9,320,738,320,720,320C701.5,320,683,320,665,320C646.2,320,628,320,609,320C590.8,320,572,320,554,320C535.4,320,517,320,498,320C480,320,462,320,443,320C424.6,320,406,320,388,320C369.2,320,351,320,332,320C313.8,320,295,320,277,320C258.5,320,240,320,222,320C203.1,320,185,320,166,320C147.7,320,129,320,111,320C92.3,320,74,320,55,320C36.9,320,18,320,9,320L0,320Z';
  const d3 =
    'M0,64L9.2,58.7C18.5,53,37,43,55,53.3C73.8,64,92,96,111,117.3C129.2,139,148,149,166,138.7C184.6,128,203,96,222,106.7C240,117,258,171,277,197.3C295.4,224,314,224,332,202.7C350.8,181,369,139,388,149.3C406.2,160,425,224,443,261.3C461.5,299,480,309,498,309.3C516.9,309,535,299,554,266.7C572.3,235,591,181,609,144C627.7,107,646,85,665,69.3C683.1,53,702,43,720,58.7C738.5,75,757,117,775,154.7C793.8,192,812,224,831,208C849.2,192,868,128,886,112C904.6,96,923,128,942,138.7C960,149,978,139,997,128C1015.4,117,1034,107,1052,117.3C1070.8,128,1089,160,1108,154.7C1126.2,149,1145,107,1163,74.7C1181.5,43,1200,21,1218,48C1236.9,75,1255,149,1274,181.3C1292.3,213,1311,203,1329,186.7C1347.7,171,1366,149,1385,128C1403.1,107,1422,85,1431,74.7L1440,64L1440,320L1430.8,320C1421.5,320,1403,320,1385,320C1366.2,320,1348,320,1329,320C1310.8,320,1292,320,1274,320C1255.4,320,1237,320,1218,320C1200,320,1182,320,1163,320C1144.6,320,1126,320,1108,320C1089.2,320,1071,320,1052,320C1033.8,320,1015,320,997,320C978.5,320,960,320,942,320C923.1,320,905,320,886,320C867.7,320,849,320,831,320C812.3,320,794,320,775,320C756.9,320,738,320,720,320C701.5,320,683,320,665,320C646.2,320,628,320,609,320C590.8,320,572,320,554,320C535.4,320,517,320,498,320C480,320,462,320,443,320C424.6,320,406,320,388,320C369.2,320,351,320,332,320C313.8,320,295,320,277,320C258.5,320,240,320,222,320C203.1,320,185,320,166,320C147.7,320,129,320,111,320C92.3,320,74,320,55,320C36.9,320,18,320,9,320L0,320Z';
  const d4 =
    'M0,128L9.2,138.7C18.5,149,37,171,55,165.3C73.8,160,92,128,111,138.7C129.2,149,148,203,166,234.7C184.6,267,203,277,222,250.7C240,224,258,160,277,112C295.4,64,314,32,332,16C350.8,0,369,0,388,32C406.2,64,425,128,443,149.3C461.5,171,480,149,498,128C516.9,107,535,85,554,106.7C572.3,128,591,192,609,229.3C627.7,267,646,277,665,250.7C683.1,224,702,160,720,149.3C738.5,139,757,181,775,208C793.8,235,812,245,831,250.7C849.2,256,868,256,886,213.3C904.6,171,923,85,942,85.3C960,85,978,171,997,186.7C1015.4,203,1034,149,1052,138.7C1070.8,128,1089,160,1108,149.3C1126.2,139,1145,85,1163,96C1181.5,107,1200,181,1218,202.7C1236.9,224,1255,192,1274,149.3C1292.3,107,1311,53,1329,48C1347.7,43,1366,85,1385,106.7C1403.1,128,1422,128,1431,128L1440,128L1440,320L1430.8,320C1421.5,320,1403,320,1385,320C1366.2,320,1348,320,1329,320C1310.8,320,1292,320,1274,320C1255.4,320,1237,320,1218,320C1200,320,1182,320,1163,320C1144.6,320,1126,320,1108,320C1089.2,320,1071,320,1052,320C1033.8,320,1015,320,997,320C978.5,320,960,320,942,320C923.1,320,905,320,886,320C867.7,320,849,320,831,320C812.3,320,794,320,775,320C756.9,320,738,320,720,320C701.5,320,683,320,665,320C646.2,320,628,320,609,320C590.8,320,572,320,554,320C535.4,320,517,320,498,320C480,320,462,320,443,320C424.6,320,406,320,388,320C369.2,320,351,320,332,320C313.8,320,295,320,277,320C258.5,320,240,320,222,320C203.1,320,185,320,166,320C147.7,320,129,320,111,320C92.3,320,74,320,55,320C36.9,320,18,320,9,320L0,320Z';
  const d5 =
    'M0,64L9.2,53.3C18.5,43,37,21,55,21.3C73.8,21,92,43,111,53.3C129.2,64,148,64,166,53.3C184.6,43,203,21,222,10.7C240,0,258,0,277,21.3C295.4,43,314,85,332,117.3C350.8,149,369,171,388,202.7C406.2,235,425,277,443,261.3C461.5,245,480,171,498,170.7C516.9,171,535,245,554,256C572.3,267,591,213,609,213.3C627.7,213,646,267,665,282.7C683.1,299,702,277,720,261.3C738.5,245,757,235,775,229.3C793.8,224,812,224,831,197.3C849.2,171,868,117,886,106.7C904.6,96,923,128,942,138.7C960,149,978,139,997,144C1015.4,149,1034,171,1052,176C1070.8,181,1089,171,1108,176C1126.2,181,1145,203,1163,202.7C1181.5,203,1200,181,1218,144C1236.9,107,1255,53,1274,58.7C1292.3,64,1311,128,1329,149.3C1347.7,171,1366,149,1385,133.3C1403.1,117,1422,107,1431,101.3L1440,96L1440,320L1430.8,320C1421.5,320,1403,320,1385,320C1366.2,320,1348,320,1329,320C1310.8,320,1292,320,1274,320C1255.4,320,1237,320,1218,320C1200,320,1182,320,1163,320C1144.6,320,1126,320,1108,320C1089.2,320,1071,320,1052,320C1033.8,320,1015,320,997,320C978.5,320,960,320,942,320C923.1,320,905,320,886,320C867.7,320,849,320,831,320C812.3,320,794,320,775,320C756.9,320,738,320,720,320C701.5,320,683,320,665,320C646.2,320,628,320,609,320C590.8,320,572,320,554,320C535.4,320,517,320,498,320C480,320,462,320,443,320C424.6,320,406,320,388,320C369.2,320,351,320,332,320C313.8,320,295,320,277,320C258.5,320,240,320,222,320C203.1,320,185,320,166,320C147.7,320,129,320,111,320C92.3,320,74,320,55,320C36.9,320,18,320,9,320L0,320Z';

  /*  For path2 */
  const d6 =
    'M0,0L48,48C96,96,192,192,288,202.7C384,213,480,139,576,90.7C672,43,768,21,864,53.3C960,85,1056,171,1152,176C1248,181,1344,107,1392,69.3L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z';
  const d7 =
    'M0,256L48,240C96,224,192,192,288,192C384,192,480,224,576,208C672,192,768,128,864,133.3C960,139,1056,213,1152,224C1248,235,1344,181,1392,154.7L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z';
  const d8 =
    'M0,192L48,208C96,224,192,256,288,229.3C384,203,480,117,576,122.7C672,128,768,224,864,234.7C960,245,1056,171,1152,144C1248,117,1344,139,1392,149.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z';
  const d9 =
    'M0,192L48,208C96,224,192,256,288,266.7C384,277,480,267,576,229.3C672,192,768,128,864,117.3C960,107,1056,149,1152,165.3C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z';
  const d10 =
    'M0,96L48,128C96,160,192,224,288,218.7C384,213,480,139,576,138.7C672,139,768,213,864,240C960,267,1056,245,1152,218.7C1248,192,1344,160,1392,144L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z';

  const backgroundColorArray = ['#00ffff', '#66c2ff', '#0099ff'];

  const fillOpacity = anim.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
  });

  const offset = fillOpacity.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 10],
  });

  const strokeOpacity = offset.interpolate({
    inputRange: [0, 10],
    outputRange: [0, 1],
    extrapolateRight: 'clamp',
  });

  const path = anim.interpolate({
    inputRange: [0, 0.25, 0.5, 0.75, 1],
    outputRange: [d1, d2, d3, d4, d5],
  });

  const path2 = anim2.interpolate({
    inputRange: [0, 0.25, 0.5, 0.75, 1],
    outputRange: [d6, d7, d8, d9, d10],
  });

  const fill = strokeOpacity.interpolate({
    inputRange: [0, 1],
    outputRange: ['rgba(102, 0, 255, 0.6)', 'rgba(0, 255, 255, 1)'],
  });

  const fill2 = strokeOpacity.interpolate({
    inputRange: [0, 1],
    outputRange: ['rgba(0, 255, 255, 0.8)', 'rgba(0, 255, 255, 1)'],
  });

  const waterTranslate = water.interpolate({
    inputRange: [0, 1],
    outputRange: [0, -358],
  });

  const startAnimation = () => {
    Animated.parallel([
      Animated.timing(water, {
        toValue: 1,
        duration: 14000,
        useNativeDriver: true,
        easing: Easing.linear,
      }).start(),
      Animated.timing(opacity, {
        toValue: 1,
        duration: 14000,
        useNativeDriver: true,
        easing: Easing.linear,
      }).start(),
      Animated.timing(anim, {
        toValue: 1,
        duration: 14000,
        useNativeDriver: true,
      }).start(),
      Animated.timing(anim2, {
        toValue: 1,
        duration: 20000,
        useNativeDriver: true,
      }).start(),
    ]).start();
  };

  const resetAnimation = () => {
    water.setValue(0);
    opacity.setValue(0.8);
    anim.setValue(0);
    anim2.setValue(0);
  };
  return (
    <View style={styles.container}>
      <StatusBar backgroundColor="white" barStyle="dark-content" />
      <SafeAreaView>
        <ScrollView
          contentInsetAdjustmentBehavior="automatic"
          style={styles.scrollView}>
          <View style={styles.body}>
            <View style={styles.circleDiv}>
              <View style={styles.circle}>
                <Animated.View
                  style={[
                    styles.water,
                    {transform: [{translateY: waterTranslate}], opacity},
                  ]}>
                  <LinearGradient
                    colors={backgroundColorArray}
                    style={styles.lineargradient}>
                    <Svg viewBox="0 0 1440 320" style={styles.svgWaves}>
                      <AnimatedPath d={path} fill={fill} />
                      <AnimatedPath d={path2} fill={fill2} />
                    </Svg>
                  </LinearGradient>
                </Animated.View>
              </View>
            </View>
            <View style={styles.buttonDiv}>
              <Button
                style={styles.button}
                onPress={() => startAnimation()}
                title="Start"
              />
              <Button
                style={styles.button}
                onPress={() => resetAnimation()}
                title="Reset"
              />
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  scrollView: {
    backgroundColor: 'white',
  },
  body: {
    backgroundColor: 'white',
  },
  circleDiv: {
    marginTop: 120,
    height: 300,
    width: 300,
    borderRadius: 300 / 2,
    backgroundColor: 'rgba(242, 242, 242,0.1)',
    overflow: 'hidden',
  },
  circle: {
    marginTop: 150,
    width: 300,
    height: 300,
    borderRadius: 300 / 2,
    marginBottom: 30,
    backgroundColor: 'transparent',
    zIndex: 10,
  },
  water: {
    width: 300,
    height: 300,
    borderRadius: 300 / 2,
    borderTopLeftRadius: 20 / 2,
    borderTopRightRadius: 20 / 2,
    backgroundColor: '#0099ff',
    zIndex: -1,
    marginTop: 206,
  },

  svgWaves: {
    zIndex: 1,
    width: 300,
    height: 300,
    borderRadius: 300 / 2,
    marginTop: -183,
  },
  button: {
    paddingTop: 30,
    zIndex: 10,
  },
  buttonDiv: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: 'white',
    zIndex: 10,
    marginTop: 30,
  },
  lineargradient: {
    width: 300,
    height: 300,
    borderRadius: 300 / 2,
    borderTopLeftRadius: 10 / 2,
    borderTopRightRadius: 10 / 2,
  },
});

export default App;
