import React, {useState} from 'react';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  Text,
  StatusBar,
  Animated,
  Button,
  Easing,
  Dimensions,
} from 'react-native';
import {Svg, Rect, Path} from 'react-native-svg';
import LinearGradient from 'react-native-linear-gradient';

const AnimatedPath = Animated.createAnimatedComponent(Path);

const App = () => {
  const {width, height} = Dimensions.get('window');
  const anim = useState(new Animated.Value(0))[0];
  const anim2 = useState(new Animated.Value(0))[0];
  const water = useState(new Animated.Value(0))[0];
  const opacity = useState(new Animated.Value(0.8))[0];

  /* for path1 */
  const d1 =
    'M0,160L9.6,160C19.2,160,38,160,58,144C76.8,128,96,96,115,96C134.4,96,154,128,173,160C192,192,211,224,230,202.7C249.6,181,269,107,288,90.7C307.2,75,326,117,346,144C364.8,171,384,181,403,192C422.4,203,442,213,461,197.3C480,181,499,139,518,144C537.6,149,557,203,576,213.3C595.2,224,614,192,634,197.3C652.8,203,672,245,691,245.3C710.4,245,730,203,749,170.7C768,139,787,117,806,138.7C825.6,160,845,224,864,224C883.2,224,902,160,922,128C940.8,96,960,96,979,101.3C998.4,107,1018,117,1037,122.7C1056,128,1075,128,1094,117.3C1113.6,107,1133,85,1152,96C1171.2,107,1190,149,1210,192C1228.8,235,1248,277,1267,250.7C1286.4,224,1306,128,1325,90.7C1344,53,1363,75,1382,101.3C1401.6,128,1421,160,1430,176L1440,192L1440,320L1430.4,320C1420.8,320,1402,320,1382,320C1363.2,320,1344,320,1325,320C1305.6,320,1286,320,1267,320C1248,320,1229,320,1210,320C1190.4,320,1171,320,1152,320C1132.8,320,1114,320,1094,320C1075.2,320,1056,320,1037,320C1017.6,320,998,320,979,320C960,320,941,320,922,320C902.4,320,883,320,864,320C844.8,320,826,320,806,320C787.2,320,768,320,749,320C729.6,320,710,320,691,320C672,320,653,320,634,320C614.4,320,595,320,576,320C556.8,320,538,320,518,320C499.2,320,480,320,461,320C441.6,320,422,320,403,320C384,320,365,320,346,320C326.4,320,307,320,288,320C268.8,320,250,320,230,320C211.2,320,192,320,173,320C153.6,320,134,320,115,320C96,320,77,320,58,320C38.4,320,19,320,10,320L0,320Z';
  const d2 =
    'M0,224L9.6,224C19.2,224,38,224,58,192C76.8,160,96,96,115,85.3C134.4,75,154,117,173,128C192,139,211,117,230,117.3C249.6,117,269,139,288,170.7C307.2,203,326,245,346,224C364.8,203,384,117,403,112C422.4,107,442,181,461,192C480,203,499,149,518,154.7C537.6,160,557,224,576,229.3C595.2,235,614,181,634,186.7C652.8,192,672,256,691,272C710.4,288,730,256,749,234.7C768,213,787,203,806,202.7C825.6,203,845,213,864,208C883.2,203,902,181,922,170.7C940.8,160,960,160,979,144C998.4,128,1018,96,1037,122.7C1056,149,1075,235,1094,229.3C1113.6,224,1133,128,1152,85.3C1171.2,43,1190,53,1210,96C1228.8,139,1248,213,1267,218.7C1286.4,224,1306,160,1325,165.3C1344,171,1363,245,1382,282.7C1401.6,320,1421,320,1430,320L1440,320L1440,320L1430.4,320C1420.8,320,1402,320,1382,320C1363.2,320,1344,320,1325,320C1305.6,320,1286,320,1267,320C1248,320,1229,320,1210,320C1190.4,320,1171,320,1152,320C1132.8,320,1114,320,1094,320C1075.2,320,1056,320,1037,320C1017.6,320,998,320,979,320C960,320,941,320,922,320C902.4,320,883,320,864,320C844.8,320,826,320,806,320C787.2,320,768,320,749,320C729.6,320,710,320,691,320C672,320,653,320,634,320C614.4,320,595,320,576,320C556.8,320,538,320,518,320C499.2,320,480,320,461,320C441.6,320,422,320,403,320C384,320,365,320,346,320C326.4,320,307,320,288,320C268.8,320,250,320,230,320C211.2,320,192,320,173,320C153.6,320,134,320,115,320C96,320,77,320,58,320C38.4,320,19,320,10,320L0,320Z';
  const d3 =
    'M0,192L9.6,170.7C19.2,149,38,107,58,122.7C76.8,139,96,213,115,218.7C134.4,224,154,160,173,154.7C192,149,211,203,230,218.7C249.6,235,269,213,288,208C307.2,203,326,213,346,192C364.8,171,384,117,403,117.3C422.4,117,442,171,461,170.7C480,171,499,117,518,106.7C537.6,96,557,128,576,165.3C595.2,203,614,245,634,272C652.8,299,672,309,691,261.3C710.4,213,730,107,749,64C768,21,787,43,806,64C825.6,85,845,107,864,101.3C883.2,96,902,64,922,85.3C940.8,107,960,181,979,208C998.4,235,1018,213,1037,208C1056,203,1075,213,1094,229.3C1113.6,245,1133,267,1152,277.3C1171.2,288,1190,288,1210,282.7C1228.8,277,1248,267,1267,245.3C1286.4,224,1306,192,1325,170.7C1344,149,1363,139,1382,144C1401.6,149,1421,171,1430,181.3L1440,192L1440,320L1430.4,320C1420.8,320,1402,320,1382,320C1363.2,320,1344,320,1325,320C1305.6,320,1286,320,1267,320C1248,320,1229,320,1210,320C1190.4,320,1171,320,1152,320C1132.8,320,1114,320,1094,320C1075.2,320,1056,320,1037,320C1017.6,320,998,320,979,320C960,320,941,320,922,320C902.4,320,883,320,864,320C844.8,320,826,320,806,320C787.2,320,768,320,749,320C729.6,320,710,320,691,320C672,320,653,320,634,320C614.4,320,595,320,576,320C556.8,320,538,320,518,320C499.2,320,480,320,461,320C441.6,320,422,320,403,320C384,320,365,320,346,320C326.4,320,307,320,288,320C268.8,320,250,320,230,320C211.2,320,192,320,173,320C153.6,320,134,320,115,320C96,320,77,320,58,320C38.4,320,19,320,10,320L0,320Z';

  /*  For path2 */
  const d4 =
    'M0,96L26.7,122.7C53.3,149,107,203,160,234.7C213.3,267,267,277,320,288C373.3,299,427,309,480,293.3C533.3,277,587,235,640,186.7C693.3,139,747,85,800,58.7C853.3,32,907,32,960,48C1013.3,64,1067,96,1120,90.7C1173.3,85,1227,43,1280,69.3C1333.3,96,1387,192,1413,240L1440,288L1440,320L1413.3,320C1386.7,320,1333,320,1280,320C1226.7,320,1173,320,1120,320C1066.7,320,1013,320,960,320C906.7,320,853,320,800,320C746.7,320,693,320,640,320C586.7,320,533,320,480,320C426.7,320,373,320,320,320C266.7,320,213,320,160,320C106.7,320,53,320,27,320L0,320Z';
  const d5 =
    'M0,32L26.7,37.3C53.3,43,107,53,160,90.7C213.3,128,267,192,320,192C373.3,192,427,128,480,106.7C533.3,85,587,107,640,122.7C693.3,139,747,149,800,170.7C853.3,192,907,224,960,240C1013.3,256,1067,256,1120,256C1173.3,256,1227,256,1280,234.7C1333.3,213,1387,171,1413,149.3L1440,128L1440,320L1413.3,320C1386.7,320,1333,320,1280,320C1226.7,320,1173,320,1120,320C1066.7,320,1013,320,960,320C906.7,320,853,320,800,320C746.7,320,693,320,640,320C586.7,320,533,320,480,320C426.7,320,373,320,320,320C266.7,320,213,320,160,320C106.7,320,53,320,27,320L0,320Z';
  const d6 =
    'M0,224L26.7,213.3C53.3,203,107,181,160,154.7C213.3,128,267,96,320,117.3C373.3,139,427,213,480,208C533.3,203,587,117,640,74.7C693.3,32,747,32,800,53.3C853.3,75,907,117,960,149.3C1013.3,181,1067,203,1120,218.7C1173.3,235,1227,245,1280,234.7C1333.3,224,1387,192,1413,176L1440,160L1440,320L1413.3,320C1386.7,320,1333,320,1280,320C1226.7,320,1173,320,1120,320C1066.7,320,1013,320,960,320C906.7,320,853,320,800,320C746.7,320,693,320,640,320C586.7,320,533,320,480,320C426.7,320,373,320,320,320C266.7,320,213,320,160,320C106.7,320,53,320,27,320L0,320Z';

  const backgroundColorArray = ['#00ffff', '#66c2ff', '#0099ff'];

  const fillOpacity = anim.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
  });
  const offset = fillOpacity.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 10],
  });
  const strokeOpacity = offset.interpolate({
    inputRange: [0, 10],
    outputRange: [0, 1],
    extrapolateRight: 'clamp',
  });
  const path = anim.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [d1, d2, d3],
  });
  const path2 = anim2.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [d4, d5, d6],
  });
  const fill = strokeOpacity.interpolate({
    inputRange: [0, 1],
    outputRange: ['rgba(102, 0, 255, 0.6)', 'rgba(0, 255, 255, 1)'],
  });

  const fill2 = strokeOpacity.interpolate({
    inputRange: [0, 1],
    outputRange: ['rgba(0, 255, 255, 0.8)', 'rgba(0, 255, 255, 1)'],
  });

  const waterTranslate = water.interpolate({
    inputRange: [0, 1],
    outputRange: [0, -358],
  });

  const translateWaterY = () => {
    Animated.parallel([
      Animated.timing(water, {
        toValue: 1,
        duration: 14000,
        useNativeDriver: true,
        easing: Easing.linear,
      }).start(),
      Animated.timing(opacity, {
        toValue: 1,
        duration: 14000,
        useNativeDriver: true,
        easing: Easing.linear,
      }).start(),
      Animated.timing(anim, {
        toValue: 1,
        duration: 14000,
        useNativeDriver: true,
      }).start(),
      Animated.timing(anim2, {
        toValue: 1,
        duration: 20000,
        useNativeDriver: true,
      }).start(),
    ]).start();
  };

  const resetAnimation = () => {
    water.setValue(0);
    opacity.setValue(0.8);
    anim.setValue(0);
    anim2.setValue(0);
  };
  return (
    <View style={styles.container}>
      <StatusBar backgroundColor="white" barStyle="dark-content" />
      <SafeAreaView>
        <ScrollView
          contentInsetAdjustmentBehavior="automatic"
          style={styles.scrollView}>
          <View style={styles.body}>
            <View
              style={{
                marginTop: 120,
                height: 300,
                width: 300,
                borderRadius: 300 / 2,
                backgroundColor: 'rgba(242, 242, 242,0.2)',
                overflow: 'hidden',
              }}>
              <View style={styles.circle}>
                <Animated.View
                  style={[
                    styles.water,
                    {transform: [{translateY: waterTranslate}], opacity},
                  ]}>
                  <LinearGradient
                    colors={backgroundColorArray}
                    style={{
                      width: 300,
                      height: 300,
                      borderRadius: 300 / 2,
                      borderTopLeftRadius: 10 / 2,
                      borderTopRightRadius: 10 / 2,
                    }}>
                    <Svg
                      viewBox="0 0 1440 320"
                      style={{
                        zIndex: 1,
                        width: 300,
                        height: 300,
                        borderRadius: 300 / 2,
                        marginTop: -183,
                      }}>
                      <AnimatedPath d={path} fill={fill} />
                      <AnimatedPath d={path2} fill={fill2} />
                    </Svg>
                  </LinearGradient>
                </Animated.View>
              </View>
            </View>
            <View
              style={{
                flexDirection: 'row',
                justifyContent: 'space-around',
                backgroundColor: 'white',
                zIndex: 10,
                marginTop: 30,
              }}>
              <Button
                style={styles.button}
                onPress={() => translateWaterY()}
                title="Start"
              />
              <Button
                style={styles.button}
                onPress={() => resetAnimation()}
                title="Reset"
              />
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  scrollView: {
    backgroundColor: 'white',
  },
  body: {
    backgroundColor: 'white',
  },
  circle: {
    marginTop: 150,
    width: 300,
    height: 300,
    borderRadius: 300 / 2,
    marginBottom: 30,
    backgroundColor: 'transparent',
    zIndex: 10,
  },
  water: {
    width: 300,
    height: 300,
    borderRadius: 300 / 2,
    borderTopLeftRadius: 20 / 2,
    borderTopRightRadius: 20 / 2,
    backgroundColor: '#0099ff',
    zIndex: -1,
    marginTop: 206,
  },
  button: {
    paddingTop: 30,
    zIndex: 10,
  },
});

export default App;
